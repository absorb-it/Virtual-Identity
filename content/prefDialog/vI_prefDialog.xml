<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - This program is free software; you can redistribute it and/or modify
   - it under the terms of the GNU General Public License as published by
   - the Free Software Foundation; either version 2 of the License, or
   - (at your option) any later version.

   - This program is distributed in the hope that it will be useful,
   - but WITHOUT ANY WARRANTY; without even the implied warranty of
   - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   - GNU General Public License for more details.

   - You should have received a copy of the GNU General Public License
   - along with this program; if not, write to the Free Software
   - Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

   - The Original Code is the Virtual Identity Extension.

   - The Initial Developer of the Original Code is Rene Ejury.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.

   - Contributor(s):
   - ***** END LICENSE BLOCK ***** -->

<bindings id="prefDialogBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
	
    <binding id="identitySelector" extends="chrome://global/content/bindings/listbox.xml#listbox">
    <implementation>
    <constructor>
        <![CDATA[
        with (virtualIdentityExtension.LIB) { 
		virtualIdentityExtension.MyLog.debug("prefDialog.xml identitySelector: constructor");
        var AccountManager = Components.classes["@mozilla.org/messenger/account-manager;1"]
            .getService(Components.interfaces.nsIMsgAccountManager);
        var debugNotes = vI.prefDialog.preferences.getBoolPref("debug_notification");

        Components.utils.import("resource://v_identity/vI_accountUtils.js", virtualIdentityExtension);
        var accounts = virtualIdentityExtension.getAccountsArray();
        for (let acc = 0; acc < accounts.length; acc++) {
            let account = accounts[acc];
            let identities = virtualIdentityExtension.getIdentitiesArray(account);
            for (let i = 0; i < identities.length; i++) {
                let identity = identities[i];
                const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                var listitem = document.createElementNS(XUL_NS, "listitem"); // create a new XUL listitem
                listitem.setAttribute("class", "selectorListitem");
                listitem.setAttribute("label", identity.identityName);
                listitem.setAttribute("value", identity.key);
                listitem.setAttribute("description", " - " + account.incomingServer.prettyName);
                listitem.setAttribute("debugNotesHidden", !debugNotes);
                if (this.firstChild) this.insertBefore(listitem, this.firstChild);      // ensure that new elements are visible
                else this.appendChild(listitem);                                        // otherwise checkbox will not be initialized
            }
        }
        if (debugNotes)
            document.getAnonymousElementByAttribute(this, "id", "ignoreIDs_debug").removeAttribute("hidden")
		}
        ]]>
    </constructor>
    <property name="value" >
        <setter><![CDATA[
        with (virtualIdentityExtension.LIB) { 
		virtualIdentityExtension.MyLog.debug("prefDialog.xml identitySelector: setting value to '" + val + "'");
        var listItems = this.childNodes;
        for (var index = 0; index < listItems.length; index++) {
            var key = listItems[index].getAttribute("value");
            listItems[index].checked = (val.indexOf(":" + key + ":") == -1);
            virtualIdentityExtension.MyLog.debug("prefDialog.xml identitySelector: setting value, '" + listItems[index].getAttribute("value") + "' '" + listItems[index].checked + "' '" + listItems[index].getAttribute("checked") + "'")
        }
        this._value = val;
		}
        ]]></setter>
        <getter><![CDATA[
        with (virtualIdentityExtension.LIB) { 
		virtualIdentityExtension.MyLog.debug("prefDialog.xml identitySelector: getting value");
        var returnVal = "";
        var listItems = this.childNodes;
        for (var index = 0; index < listItems.length; index++) {
            virtualIdentityExtension.MyLog.debug("prefDialog.xml identitySelector: getting value, '" + listItems[index].getAttribute("value") + "' '" + listItems[index].checked + "' '" + listItems[index].getAttribute("checked") + "'");
            if (!listItems[index].checked) returnVal += " :" + listItems[index].getAttribute("value") + ": "
        }
        virtualIdentityExtension.MyLog.debug("prefDialog.xml identitySelector: getting value, result '" + returnVal + "'");
        return returnVal;
		}
        ]]></getter>        
    </property>
    </implementation>
    </binding>

    <binding id="selectorListitem" extends="chrome://global/content/bindings/listbox.xml#listitem">
    <content allowevents="true">
        <xul:checkbox anonid="selector_checkbox" />
        <xul:label class="vI_menupopup-text" xbl:inherits="value=label,accesskey,crop" />
        <xul:label class="vI_menupopup-description" anonid="debugNote" xbl:inherits="value=value, hidden=debugNotesHidden" hidden="true" />
        <xul:label class="vI_menupopup-description" xbl:inherits="value=description" flex="1" />
    </content>
    <implementation>
    <property name="checked" onget="return this._checkbox.checked;" onset="this._checkbox.checked = val;" />
    <field name="_checkbox">document.getAnonymousElementByAttribute(this, "anonid", "selector_checkbox")</field>
    </implementation>
    </binding>

</bindings>
