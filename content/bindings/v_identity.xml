<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - This program is free software; you can redistribute it and/or modify
   - it under the terms of the GNU General Public License as published by
   - the Free Software Foundation; either version 2 of the License, or
   - (at your option) any later version.

   - This program is distributed in the hope that it will be useful,
   - but WITHOUT ANY WARRANTY; without even the implied warranty of
   - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   - GNU General Public License for more details.

   - You should have received a copy of the GNU General Public License
   - along with this program; if not, write to the Free Software
   - Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

   - The Original Code is the Virtual Identity Extension.

   - The Initial Developer of the Original Code is Rene Ejury.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.

   - Contributor(s):
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE overlay [
<!ENTITY % vIdentDTD SYSTEM "chrome://v_identity/locale/v_identity.dtd">
%vIdentDTD;
]>


<bindings id="mailComposeBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
	
	<binding id="vI_tooltipPopupset">
	<implementation>
	<method name="addTooltip">
	<parameter name="elem" />
	<parameter name="permanent" />
        	<body><![CDATA[
            if (elem) {
                var randID = elem.tooltipElem.getAttribute("tooltip");
                this.removeTooltip(randID);
                if (!randID) {
                    randID = "virtualIdentityExtension_tooltip_" + parseInt((new Date()).getTime());
                    elem.tooltipElem.setAttribute("tooltip", randID);
                }
                var toolTip = document.createElement("tooltip");
                toolTip.setAttribute("class", "identityDataTooltip");
                toolTip.setAttribute("id", randID);
                toolTip.elem = elem;
                toolTip.permanent = permanent;
                this.appendChild(toolTip);
                }
		]]></body>
	</method>
	<method name="removeTooltip">
	<parameter name="randID" />
        <body><![CDATA[
		if (randID) {
			var randIDelem = document.getElementById(randID);
			if (randIDelem) this.removeChild(randIDelem);
		}
		]]></body>
	</method>
	</implementation>
	</binding>
	
	<binding id="vI_identityDataTooltip" extends="chrome://global/content/bindings/popup.xml#tooltip">
 	<content onpopuphidden="popuphidden();" onpopupshowing="this.popupshowing();this.resize()" onpopupshown="this.resize()" >
			<xul:browser style="overflow:hidden" anonid="tooltipBrowser" type="chrome" class="vI_htmlTextBox" cssSource="vI_TooltipBrowser.css" flex="1" disablehistory="true" onoverflow="document.getBindingParent(this).resize()"/>
			<children />
	</content>
	<implementation>
	<method name="popupshowing">
        	<body><![CDATA[
			virtualIdentityExtension.MyLog.debug("v_identity.xml vI_tooltipPopupset popupshowing.")
		if (!this._identityInfo) {
			this._identityInfo = 
				"<table><tr>" +
					"<td class='image'><img src='chrome://v_identity/skin/vi-info.png' /></td>" +
					"<td class='identityTable'>" +
						"<div class='name'>" + this.elem.identityData.combinedNameHtml + "</div>" +	
						"<table><tbody>" + this.elem.identityData.getMatrix() + "</tbody></table>" +
					"</td>" +
				"</tr></table>"
			virtualIdentityExtension.MyLog.debug("v_identity.xml added tooltip with id='" +  this.elem.identityData.id.key + "'")
			this._tooltipBrowser.outputString = this._identityInfo;
		}
		virtualIdentityExtension.MyLog.debug("v_identity.xml vI_tooltipPopupset popupshowing done.")
		]]></body>
	</method>
	<method name ="popuphidden">
        	<body><![CDATA[	
		if (!this.permanent) this._identityInfo = null;
		]]></body>
	</method>	
	<method name="resize">
		<body><![CDATA[
		if (!this._identityInfo) return;
		var width = document.getElementById("msgIdentity").boxObject.width * 0.7;
		var height = this._tooltipBrowser.contentDocument.lastChild.scrollHeight + 5;
		this.sizeTo(width, height);
		width = document.getElementById("msgIdentity").boxObject.width * 0.75;
		this.sizeTo(width, height);
		]]></body>
	</method>
	<field name="permanent" />
	<field name="elem" />
<!-- 	<field name="identityData">this.elem.identityData</field> -->
	<field name="_identityInfo">false</field>
<!-- 	<field name="_initialized">false</field> -->
	<field name="_tooltipBrowser">document.getAnonymousElementByAttribute(this, "anonid", "tooltipBrowser")</field>
	</implementation>
	</binding>	
	
	<binding id="fromPopupItem_clone" extends="chrome://global/content/bindings/menu.xml#menuitem">
  	<content excludes="template,observes,menupopup">
		<xul:image class="menupopup_clone-icon" xbl:inherits="src"/>
		<xul:label class="menupopup_clone-text" xbl:inherits="value=label,accesskey,crop" crop="right" flex="1"/>
		<xul:label value="&vident.accPane.prettyName.prefix;" class="menupopup_clone-vid virtIdLabel" vid="false" xbl:inherits="vid" crop="right"/>
      		<xul:label class="menupopup_clone-description" xbl:inherits="value=description" crop="right"/>
		<xul:label class="menupopup_clone-smtp" xbl:inherits="value=smtp,style=smtpStyle" crop="right"/>
  	</content>
  	<implementation>
	<constructor>
		<![CDATA[
		this._identityDataStorage = this.identityData;
		
		this.label = this._identityDataStorage.combinedName;
		this.value = this._identityDataStorage.id.key;
        // virtualIdentityExtension.MyLog.debug("v_identity.xml fromPopupItem_clone constructor id='" + this.value + "'")

		this.description = this._identityDataStorage.sideDescription?this._identityDataStorage.sideDescription:"";
		this.smtp = this._identityDataStorage.smtp.value;
        // virtualIdentityExtension.MyLog.debug("v_identity.xml fromPopupItem_clone constructor smtp='" + this.smtp + "'")
		this.smtpStyle = "width:" + document.getElementById("virtualIdentityExtension_SmtpServerList").clientWidth + "px;";
		this._identityDataStorage.smtp.value;
		
		document.getElementById("virtualIdentityExtension_tooltipPopupset").addTooltip(this, true);
		]]>
	</constructor>
	<method name="clean">
        	<body><![CDATA[
		document.getElementById("virtualIdentityExtension_tooltipPopupset")
			.removeTooltip(this.tooltipElem.getAttribute("tooltip"));
		]]></body>
	</method>
	<destructor>
		<![CDATA[
		this.clean();
		]]>
	</destructor>
	<property name="_identityData" onget="return this._identityDataStorage;" />
	<field name="tooltipElem">this</field>
	<property name="vid" onget="return this.getAttribute('vid');" onset="this.setAttribute('vid', val); return val;" />
	<property name="label" onget="return this.getAttribute('label');" onset="this.setAttribute('label', val); return val;" />
	<property name="value" onget="return this.getAttribute('value');" onset="this.setAttribute('value', val); return val;" />
	<property name="description" onget="return this.getAttribute('description');" onset="this.setAttribute('description', val); return val;" />
	<property name="smtp" onget="return this.getAttribute('smtp');" onset="this.setAttribute('smtp', val); return val;" />
	<property name="smtpStyle" onget="return this.getAttribute('smtpStyle');" onset="this.setAttribute('smtpStyle', val); return val;" />
	</implementation>
	</binding>

	<binding id="smtpServerList">
 	<resources>
      		<stylesheet src="chrome://global/skin/menu.css"/>
  	</resources>
 	<content sizetopopup="pref">
		<xul:hbox id="smtpServerHbox" class="smtpServerHbox">
			<xul:menulist class="smtpServerMenuList" anonid="smtpServerMenuList" allowevents="true" id="virtualIdentityExtension_SmtpServerList">
				<xul:menupopup anonid="virtualIdentityExtension_SmtpServerList_popup" />
			</xul:menulist>
			<xul:checkbox  id="virtualIdentityExtension_SaveSmtpSwitch" class="vI_plain" allowevents="true" oncommand="event.stopPropagation();virtualIdentityExtension.vIprefs.set('storage_store_SMTP', this.checked);" >
				<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveSMTP" attribute="checked" />
				<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveSMTP" attribute="disabled" />
			</xul:checkbox>
			<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveSMTP" attribute="checked" />
			<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveSMTP" attribute="disabled" />
		</xul:hbox>
	</content>
	<implementation>
	<method name="addNoneServer">
		<body><![CDATA[
		var listitem = document.createElement("menuitem");
		listitem.setAttribute("class", "menuitem-non-iconic");
		listitem.setAttribute("type", "non-iconic-noaccel");
		listitem.setAttribute("label", " ");
		listitem.setAttribute("key", virtualIdentityExtension.NO_SMTP_TAG);
		this._smtpPopup.insertBefore(listitem, this._smtpPopup.firstChild);
		this._smtpMenu.selectedItem = listitem;
		]]></body>
	</method>
	<method name="_addDefaultServer">
        	<body><![CDATA[
		var listitem = document.createElement("menuitem");
		listitem.setAttribute("class", "menuitem-non-iconic");
		listitem.setAttribute("type", "non-iconic-noaccel");
		listitem.setAttribute("label", 
          Components.classes["@mozilla.org/intl/stringbundle;1"]
            .getService(Components.interfaces.nsIStringBundleService)
            .createBundle("chrome://messenger/locale/messenger.properties")
            .GetStringFromName("defaultServerTag"));
		this._smtpPopup.appendChild(listitem);
		this._smtpMenu.selectedItem = listitem;
		]]></body>
	</method>
	<method name="_addServer">
		<parameter name="server" />
        	<body><![CDATA[
		if (server instanceof Components.interfaces.nsISmtpServer && !server.redirectorType) {
			var listitem = document.createElement("menuitem");
			listitem.setAttribute("class", "menuitem-non-iconic");
			listitem.setAttribute("type", "non-iconic-noaccel");
			listitem.setAttribute("label", (server.description?server.description:server.hostname));
			listitem.setAttribute("key", server.key);
			this._smtpPopup.appendChild(listitem);
		}
		]]></body>
	</method>
	<method name="refresh">
        <body><![CDATA[
            this.unload();
            this.load();
        ]]></body>
	</method>
    <method name="load">
        <body><![CDATA[
            this._addDefaultServer();
            this._smtpPopup.appendChild(document.createElement("menuseparator"));
            
			var servers, smtpService = Components.classes["@mozilla.org/messengercompose/smtp;1"]
                .getService(Components.interfaces.nsISmtpService);
			// check for new https://hg.mozilla.org/comm-central/rev/fab9e5145cd4 smtpService
			if (typeof(smtpService.servers) == "object") servers = smtpService.servers;
			else servers = smtpService.smtpServers;
			
			while (servers && servers.hasMoreElements())
				this._addServer(servers.getNext());
        ]]></body>
    </method>
    <method name="unload">
        <body><![CDATA[
            var MenuItems = this._smtpPopup.childNodes
            while (MenuItems.length > 0) { this._smtpPopup.removeChild(MenuItems[0]) }
            this._smtpMenu.selectedItem = null;
        ]]></body>
    </method>
	<constructor>
		<![CDATA[
            this.load();
		]]>
	</constructor>
	<property name="smtp" onget="return this._smtpMenu.selectedItem.getAttribute('key');" >
		<setter><![CDATA[
		if (val == virtualIdentityExtension.NO_SMTP_TAG) return; // dont overwrite if not set
		virtualIdentityExtension.MyLog.debug("v_identity.xml smtp set to '" + val + "'")
		var MenuItems = this._smtpPopup.childNodes
		for (var index = 0; index < MenuItems.length; index++) {
			if (MenuItems[index].localName == "menuseparator") continue;
			if (MenuItems[index].getAttribute("key") == val) {
				this._smtpMenu.selectedItem = MenuItems[index];
				break;
			}
		}
		]]></setter>
	</property>
	<field name="_smtpPopup">document.getAnonymousElementByAttribute(this, "anonid", "virtualIdentityExtension_SmtpServerList_popup")</field>
	<field name="_smtpMenu">document.getAnonymousElementByAttribute(this, "anonid", "smtpServerMenuList")</field>
	<field name="_smtpService"></field>

	</implementation>
	</binding>
	
	
	<binding id="fromMenuList_new" extends="chrome://global/content/bindings/menulist.xml#menulist-editable">
  	<resources>
      		<stylesheet src="chrome://global/skin/menu.css"/>
		<stylesheet src="chrome://global/skin/autocomplete.css"/>
  	</resources>
  	<content sizetopopup="pref">
              <xul:moz-input-box id="identityHbox" anonid="inputBox" class="menulist-editable-box moz-input-box" xbl:inherits="context,disabled,readonly,focused" flex="1">
                <xul:vbox flex="1">
                  <!-- use type=search to activate trigger for inputevent -->
                <xul:textbox class="plain menulist-editable-input" anonid="input" type="search" allowevents="true"
                            oncommand="event.stopPropagation(); document.getBindingParent(this).inputEvent();"
                            onblur="event.stopPropagation(); var elem = this; while (elem.localName != 'textbox') elem = elem.parentNode; document.getBindingParent(elem).blurEvent();"
                            xbl:inherits="nomatch=vid,value=label,value,disabled,tabindex,readonly,placeholder"
                            crop="right" highlightnonmatches="true"/>
                </xul:vbox>
                <xul:vbox><xul:spacer flex="1" />
                        <xul:label value="&vident.accPane.prettyName.prefix; - " class="menu_clone-vid virtIdLabel" xbl:inherits="vid" crop="right"/>
                <xul:spacer flex="1" /></xul:vbox>
                <xul:observes element="virtualIdentityExtension_statusMenu_storage_save" attribute="checked" />
                <xul:hbox id="baseIDHbox" class="baseIDHbox" >
                        <xul:vbox><xul:spacer flex="1" />
                                <xul:hbox>
                                  <!--<xul:label id="msgIdentity_base_id_label" class="menu_clone-description" xbl:inherits="hidden=base_id_key_hidden" crop="right" hidden="true"/>-->
                                        <xul:label id="virtualIdentityExtension_msgIdentityClone_label" class="menu_clone-description" xbl:inherits="value=description" crop="right"/>
                                </xul:hbox>
                        <xul:spacer flex="1" /></xul:vbox>
                        <xul:observes element="virtualIdentityExtension_statusMenu_storage_saveBaseID" attribute="checked" />
                        <xul:observes element="virtualIdentityExtension_statusMenu_storage_saveBaseID" attribute="disabled" />
                </xul:hbox>
              </xul:moz-input-box>
              <!--<xul:hbox oncommand="event.stopPropagation();document.getBindingParent(this).smtp = this.smtp" xbl:inherits="showSmtp" anonid="smtpServerListHbox" class="smtpServerListHbox" />-->
              <xul:dropmarker class="menulist-dropmarker" type="menu" xbl:inherits="open,disabled,parentfocused=focused"/>
              <xul:popupset id="virtualIdentityExtension_tooltipPopupset" />
              <children includes="menupopup"/>
	</content>
      	<implementation>
          
	<constructor>
		<![CDATA[		
		var inputTextbox = document.getAnonymousElementByAttribute(this, "class", "plain menulist-editable-input");
		
		// check if 'search' textboxes are not implemented change to 'timed'
		if (!inputTextbox.timeout) inputTextbox.setAttribute("type", "timed");
		inputTextbox.setAttribute("timeout", "300")
		
		// too early to access virtualIdentityExtension_tooltipPopupset, this might break the interface
		// it will be done in v_identity.js init
		// document.getElementById("virtualIdentityExtension_tooltipPopupset").addTooltip(this, false);
		
		virtualIdentityExtension.vIprefs.addObserver("show_smtp", this.observe, this);
                this.observe(this);
		]]>
	</constructor>
	<destructor>
		<![CDATA[
		var tooltipPopupset = document.getElementById("virtualIdentityExtension_tooltipPopupset")
		if (tooltipPopupset) tooltipPopupset.removeTooltip(this.tooltipElem.getAttribute("tooltip"));
		virtualIdentityExtension.vIprefs.removeObserver("show_smtp", this.observe);
        ]]>
          </destructor>

	<method name="addIdentityToCloneMenu">
		<parameter name="localIdentityData" />
		<body><![CDATA[
//		var existingItem = this._isExistingCloneMenuItem(localIdentityData);
                var existingItem = localIdentityData.isExistingIdentity();
		if (!existingItem) {
			var MenuItem = document.createElement("menuitem");
			this._popupElem.appendChild(MenuItem);
			MenuItem.identityData = localIdentityData;
                        return MenuItem;
		}
		else return existingItem;
		]]></body>
	</method>
	<method name="addIdentitiesToCloneMenu">
		<parameter name="identityCollection" />
		<body><![CDATA[
		for (var index = 0; index < identityCollection.number; index++)
			identityCollection.menuItems[index] =
				this.addIdentityToCloneMenu(identityCollection.identityDataCollection[index])
		]]></body>
	</method>
	<method name="_getMenuItemForIdentity">
		<parameter name="identitykey" />
		<body><![CDATA[
                virtualIdentityExtension.MyLog.debug("v_identity.xml _getMenuItemForIdentity " + identitykey)
		var MenuItems = this._popupElem.childNodes;
		for (var index = 0; index < MenuItems.length; index++) {
                  if (MenuItems[index].getAttribute("identitykey") == identitykey)
                          return MenuItems[index]
		}
		return null;
		]]></body>
	</method>
	<property name="selectedMenuItem" >
		<getter><![CDATA[
			return this.selectedItem;
		]]></getter>
		<setter><![CDATA[
                        virtualIdentityExtension.MyLog.debug("v_identity.xml selectedMenuItem setter. " + val)
                        
			if (typeof(val) == "object") this.selectedItem = val
			else if (val == "default")
				this.selectedItem = this._getMenuItemForIdentity(this._AccountManager.defaultAccount.defaultIdentity.key)
			else this.selectedItem = this._getMenuItemForIdentity(val)

                        this._identityDataStorage.takeOverAvailableData(this.selectedItem.identityData);
                        
                        LoadIdentity();
		]]></setter>	
	</property>
	<method name="_isExistingCloneMenuItem">
		<parameter name="localIdentityData" />
		<body><![CDATA[
		var MenuItems = this._popupElem.childNodes
		for (var j = 0; j < MenuItems.length; j++) {
			if (!MenuItems[j].identityKey) continue;
			if (MenuItems[j].identityData.equals(localIdentityData)) return MenuItems[j];
		}
		return null;
		]]></body>
	</method>
	<field name="_msgIdentityPopupElem">document.getElementById("msgIdentityPopup")</field>
    <property name="_AccountManager" >
        <getter><![CDATA[
            return Components.classes["@mozilla.org/messenger/account-manager;1"]
              .getService(Components.interfaces.nsIMsgAccountManager);
        ]]></getter>
    </property>
	<method name="blurEvent">
        	<body><![CDATA[
		virtualIdentityExtension.MyLog.debug("v_identity.xml blurEvent")
		this.inputEvent(); // timeout might prevent inputEvent to fire before blurEvent
		
		this.label = this.identityData.combinedName; // add "<" and ">" to email if required
		this.setAttribute("label", this.label);
		]]></body>
	</method>
	<method name="inputEvent">
        	<body><![CDATA[		
		virtualIdentityExtension.MyLog.debug("v_identity.xml inputEvent")
		
		this.identityData.combinedName = this.label;
		
		var existingIdentity = this.checkForVirtualIdentity();
                if (existingIdentity && this.selectedMenuItem.identitykey != existingIdentity)
                    this.selectedMenuItem = existingIdentity;			
		]]></body>
	</method>
	<method name="checkForVirtualIdentity">
		<body><![CDATA[
		virtualIdentityExtension.MyLog.debug("v_identity.xml checkForVirtualIdentity: " + this.identityData.id.key + " '" + this.identityData.id.value + "'")
		var existingIdentity = this.identityData.isExistingIdentity(false);
		
		this.vid = (!existingIdentity);
		
		virtualIdentityExtension.signatureSwitch(existingIdentity);
		
		return existingIdentity;
		]]></body>
	</method>
        <property name="smtp" onget="return this.identityData.smtp.key;" > // used to detect changes from SMTP-Menu
		<setter><![CDATA[
		this.identityData.smtp.key = val;
		
		document.getElementById("virtualIdentityExtension_tooltipPopupset").addTooltip(this);

		var existingIdentity = this.checkForVirtualIdentity();
		if (existingIdentity) this.selectedMenuItem = existingIdentity;
		]]></setter>
        </property>
	<property name="identityData">
		<getter><![CDATA[
                  virtualIdentityExtension.MyLog.debug("v_identity.xml identityData getter")
                  if (this._identityDataStorage) {
                    this._identityDataStorage.extras.getValuesFromEnvironment(); // update with current data
                  }
                  else {
                    virtualIdentityExtension.MyLog.debug("v_identity.xml identityData getter - _identityDataStorage not set")
                  }
                  return this._identityDataStorage;
		]]></getter>
		<setter><![CDATA[
		virtualIdentityExtension.MyLog.debug("v_identity.xml identityData setter")
		if (val) {
			this._identityDataStorage = val;
		}
		virtualIdentityExtension.MyLog.debug("v_identity.xml identityData setter done.")
		]]></setter>
	</property>
	<field name="_popupElem">document.getElementById("msgIdentityPopup")</field>
	<field name="tooltipElem">document.getAnonymousElementByAttribute(this, "anonid", "inputBox")</field>
	<field name="textBoxElem">document.getAnonymousElementByAttribute(this, "anonid", "input");</field>
        <method name="observe">
          <parameter name="self" />
          <parameter name="aSubject" />
          <parameter name="aTopic" />
          <parameter name="aPrefName" />
          <body><![CDATA[
            self.showSmtp = 
              virtualIdentityExtension.vIprefs.get("show_smtp");
            var MenuItems = self._popupElem.childNodes;
            for (var j = 0; j < MenuItems.length; j++) {
                if (MenuItems[j].localName == "menuseparator") continue;
                MenuItems[j].smtpStyle = "width:" + document.getElementById("virtualIdentityExtension_SmtpServerList").clientWidth + "px;";
            }
            ]]></body>
        </method>
	<property name="email" onset="this.identityData.email = val; this.label = this.identityData.combinedName; this.inputEvent()" />
	<property name="vid" onget="return (this.getAttribute('vid') == 'true');" onset="this.setAttribute('vid',val); return val;" />
        <property name="value" onget="return this.textBoxElem.value;" onset="this.textBoxElem.value = val; return val;" />
	<property name="extras" onget="return this.identityData.extras;" />
	<property name="description" onget="return this.getAttribute('description');" onset="this.setAttribute('description', val); return val;" />
        <!--<property name="showSmtp" onget="return (this.getAttribute('showSmtp') == 'true');" onset="this.setAttribute('showSmtp',val?'true':'false'); return val;" />-->
	</implementation>
	</binding>

        
        <binding id="fromPopupItem_new" extends="chrome://global/content/bindings/menu.xml#menuitem">
  	<content excludes="template,observes,menupopup">
		<xul:image class="menupopup_clone-icon" xbl:inherits="src"/>
		<xul:label class="menupopup_clone-text" xbl:inherits="value=label,accesskey,crop" crop="right" flex="1"/>
		<xul:label value="&vident.accPane.prettyName.prefix;" class="menupopup_clone-vid virtIdLabel" vid="false" xbl:inherits="vid" crop="right"/>
      		<xul:label class="menupopup_clone-description" xbl:inherits="value=description" crop="right"/>
                <!--<xul:label class="menupopup_clone-smtp" xbl:inherits="value=smtp,style=smtpStyle" crop="right"/>-->
  	</content>
  	<implementation>
	<constructor>
		<![CDATA[
                document.getElementById("virtualIdentityExtension_tooltipPopupset").addTooltip(this, true);
                this.vid = "false"; // by default the item is no virtual identity
		]]>
	</constructor>
        <destructor>
		<![CDATA[
		document.getElementById("virtualIdentityExtension_tooltipPopupset")
			.removeTooltip(this.tooltipElem.getAttribute("tooltip"));
		]]>
        </destructor>
        <method name="createIdentityData">
        <body><![CDATA[
            var identity = this._AccountManager.getIdentity(this.getAttribute("identitykey"));
            if (identity) {
              this.identityData = new virtualIdentityExtension.identityData(window, identity.email,
                                    identity.fullName, identity.key,
                                    identity.smtpServerKey, null, null, true);
              this._identityData.extras.readIdentityValues(identity);
              }
            ]]></body>
        </method>
        <method name="_setAttributeIfNotEmpty">
            <parameter name="attribute" />
            <parameter name="value" />
        	<body><![CDATA[
                if (!this.getAttribute(attribute))
                  this.setAttribute(attribute, value);
            ]]></body>
        </method>
        <property name="identityData">
          <setter><![CDATA[
            // if menuitem get's initialized with identityData,
            // attributes (label, value, description, identitykey, accountkey) have to be set accordingly
            
            
            virtualIdentityExtension.MyLog.debug("v_identity.xml fromPopupItem_new set identityData");
            this._identityData = val;
              
            
            this._setAttributeIfNotEmpty("identitykey", this._identityData.id.key);
            this._setAttributeIfNotEmpty("accountkey", this._identityData.id.accountkey);

            this._setAttributeIfNotEmpty("label", this._identityData.combinedName);
            this._setAttributeIfNotEmpty("value", this._identityData.combinedName);
            this._setAttributeIfNotEmpty("smtp", this._identityData.smtp.value);
            this._setAttributeIfNotEmpty("description", "");
            
            
            this.setAttribute("vid", this._identityData.isExistingIdentity()?"false":"true");

            virtualIdentityExtension.MyLog.debug("v_identity.xml fromPopupItem_new set identityData done.");
              ]]></setter>
            <getter><![CDATA[
              if (!this._identityData)
                this.createIdentityData();

              return this._identityData;
            ]]></getter>
        </property>
        
        <property name="_AccountManager" >
          <getter><![CDATA[
            return Components.classes["@mozilla.org/messenger/account-manager;1"]
              .getService(Components.interfaces.nsIMsgAccountManager);
          ]]></getter>
        </property>

	<field name="tooltipElem">this</field>
	<property name="vid" onget="return this.getAttribute('vid');" onset="this.setAttribute('vid', val); return val;" />
	</implementation>
	</binding>
</bindings>
