<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - This program is free software; you can redistribute it and/or modify
   - it under the terms of the GNU General Public License as published by
   - the Free Software Foundation; either version 2 of the License, or
   - (at your option) any later version.

   - This program is distributed in the hope that it will be useful,
   - but WITHOUT ANY WARRANTY; without even the implied warranty of
   - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   - GNU General Public License for more details.

   - You should have received a copy of the GNU General Public License
   - along with this program; if not, write to the Free Software
   - Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

   - The Original Code is the Virtual Identity Extension.

   - The Initial Developer of the Original Code is Rene Ejury.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.

   - Contributor(s):
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE overlay [
<!ENTITY % vIdentDTD SYSTEM "chrome://v_identity/locale/v_identity.dtd">
%vIdentDTD;
]>


<bindings id="mailComposeBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
	
	<binding id="vI_tooltipPopupset">
	<implementation>
	<method name="addTooltip">
	<parameter name="elem" />
	<parameter name="permanent" />
        	<body><![CDATA[
            if (elem) {
                var randID = elem.tooltipElem.getAttribute("tooltip");
                this.removeTooltip(randID);
                if (!randID) {
                    randID = "virtualIdentityExtension_tooltip_" + parseInt((new Date()).getTime());
                    elem.tooltipElem.setAttribute("tooltip", randID);
                }
                var toolTip = document.createElement("tooltip");
                toolTip.setAttribute("class", "identityDataTooltip");
                toolTip.setAttribute("id", randID);
                toolTip.elem = elem;
                toolTip.permanent = permanent;
                this.appendChild(toolTip);
                }
		]]></body>
	</method>
	<method name="removeTooltip">
	<parameter name="randID" />
        <body><![CDATA[
		if (randID) {
			var randIDelem = document.getElementById(randID);
			if (randIDelem) this.removeChild(randIDelem);
		}
		]]></body>
	</method>
	</implementation>
	</binding>
	
	<binding id="vI_identityDataTooltip" extends="chrome://global/content/bindings/popup.xml#tooltip">
 	<content onpopuphidden="popuphidden();" onpopupshowing="this.popupshowing();this.resize()" onpopupshown="this.resize()" >
			<xul:browser style="overflow:hidden" anonid="tooltipBrowser" type="chrome" class="vI_htmlTextBox" cssSource="vI_TooltipBrowser.css" flex="1" disablehistory="true" onoverflow="document.getBindingParent(this).resize()"/>
			<children />
	</content>
	<implementation>
	<method name="popupshowing">
        	<body><![CDATA[
			virtualIdentityExtension.MyLog.debug("v_identity.xml vI_tooltipPopupset popupshowing.")
		if (!this._identityInfo) {
			this._identityInfo = 
				"<table><tr>" +
					"<td class='image'><img src='chrome://v_identity/skin/vi-info.png' /></td>" +
					"<td class='identityTable'>" +
						"<div class='name'>" + this.elem.identityData.combinedNameHtml + "</div>" +	
						"<table><tbody>" + this.elem.identityData.getMatrix() + "</tbody></table>" +
					"</td>" +
				"</tr></table>"
			virtualIdentityExtension.MyLog.debug("v_identity.xml added tooltip with id='" +  this.elem.identityData.id.key + "'")
			this._tooltipBrowser.outputString = this._identityInfo;
		}
		virtualIdentityExtension.MyLog.debug("v_identity.xml vI_tooltipPopupset popupshowing done.")
		]]></body>
	</method>
	<method name ="popuphidden">
        	<body><![CDATA[	
		if (!this.permanent) this._identityInfo = null;
		]]></body>
	</method>	
	<method name="resize">
		<body><![CDATA[
		if (!this._identityInfo) return;
		var width = document.getElementById("virtualIdentityExtension_msgIdentityClone").boxObject.width * 0.7;
		var height = this._tooltipBrowser.contentDocument.lastChild.scrollHeight + 5;
		this.sizeTo(width, height);
		width = document.getElementById("virtualIdentityExtension_msgIdentityClone").boxObject.width * 0.75;
		this.sizeTo(width, height);
		]]></body>
	</method>
	<field name="permanent" />
	<field name="elem" />
<!-- 	<field name="identityData">this.elem.identityData</field> -->
	<field name="_identityInfo">false</field>
<!-- 	<field name="_initialized">false</field> -->
	<field name="_tooltipBrowser">document.getAnonymousElementByAttribute(this, "anonid", "tooltipBrowser")</field>
	</implementation>
	</binding>	
	
	<binding id="fromPopupItem_clone" extends="chrome://global/content/bindings/menu.xml#menuitem">
  	<content excludes="template,observes,menupopup">
		<xul:image class="menupopup_clone-icon" xbl:inherits="src"/>
		<xul:label class="menupopup_clone-text" xbl:inherits="value=label,accesskey,crop" crop="right" flex="1"/>
		<xul:label value="&vident.accPane.prettyName.prefix;" class="menupopup_clone-vid virtIdLabel" vid="false" xbl:inherits="vid" crop="right"/>
      		<xul:label class="menupopup_clone-description" xbl:inherits="value=description" crop="right"/>
		<xul:label class="menupopup_clone-smtp" xbl:inherits="value=smtp,style=smtpStyle" crop="right"/>
  	</content>
  	<implementation>
	<constructor>
		<![CDATA[
		this._identityDataStorage = this.identityData;
		
		this.label = this._identityDataStorage.combinedName;
		this.value = this._identityDataStorage.id.key;
        // virtualIdentityExtension.MyLog.debug("v_identity.xml fromPopupItem_clone constructor id='" + this.value + "'")

		this.description = this._identityDataStorage.sideDescription?this._identityDataStorage.sideDescription:"";
		this.smtp = this._identityDataStorage.smtp.value;
        // virtualIdentityExtension.MyLog.debug("v_identity.xml fromPopupItem_clone constructor smtp='" + this.smtp + "'")
		this.smtpStyle = "width:" + document.getElementById("virtualIdentityExtension_SmtpServerList").clientWidth + "px;";
		this._identityDataStorage.smtp.value;
		
		document.getElementById("virtualIdentityExtension_tooltipPopupset").addTooltip(this, true);
		]]>
	</constructor>
	<method name="clean">
        	<body><![CDATA[
		document.getElementById("virtualIdentityExtension_tooltipPopupset")
			.removeTooltip(this.tooltipElem.getAttribute("tooltip"));
		]]></body>
	</method>
	<destructor>
		<![CDATA[
		this.clean();
		]]>
	</destructor>
	<property name="_identityData" onget="return this._identityDataStorage;" />
	<field name="tooltipElem">this</field>
	<property name="vid" onget="return this.getAttribute('vid');" onset="this.setAttribute('vid', val); return val;" />
	<property name="label" onget="return this.getAttribute('label');" onset="this.setAttribute('label', val); return val;" />
	<property name="value" onget="return this.getAttribute('value');" onset="this.setAttribute('value', val); return val;" />
	<property name="description" onget="return this.getAttribute('description');" onset="this.setAttribute('description', val); return val;" />
	<property name="smtp" onget="return this.getAttribute('smtp');" onset="this.setAttribute('smtp', val); return val;" />
	<property name="smtpStyle" onget="return this.getAttribute('smtpStyle');" onset="this.setAttribute('smtpStyle', val); return val;" />
	</implementation>
	</binding>

	<binding id="smtpServerList">
 	<resources>
      		<stylesheet src="chrome://global/skin/menu.css"/>
  	</resources>
 	<content sizetopopup="pref">
		<xul:hbox id="smtpServerHbox" class="smtpServerHbox">
			<xul:menulist class="smtpServerMenuList" anonid="smtpServerMenuList" allowevents="true" id="virtualIdentityExtension_SmtpServerList">
				<xul:menupopup anonid="virtualIdentityExtension_SmtpServerList_popup" />
			</xul:menulist>
			<xul:checkbox  id="virtualIdentityExtension_SaveSmtpSwitch" class="vI_plain" allowevents="true" oncommand="event.stopPropagation();virtualIdentityExtension.vIprefs.set('storage_store_SMTP', this.checked);" >
				<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveSMTP" attribute="checked" />
				<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveSMTP" attribute="disabled" />
			</xul:checkbox>
			<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveSMTP" attribute="checked" />
			<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveSMTP" attribute="disabled" />
		</xul:hbox>
	</content>
	<implementation>
	<method name="addNoneServer">
		<body><![CDATA[
		var listitem = document.createElement("menuitem");
		listitem.setAttribute("class", "menuitem-non-iconic");
		listitem.setAttribute("type", "non-iconic-noaccel");
		listitem.setAttribute("label", " ");
		listitem.setAttribute("key", virtualIdentityExtension.NO_SMTP_TAG);
		this._smtpPopup.insertBefore(listitem, this._smtpPopup.firstChild);
		this._smtpMenu.selectedItem = listitem;
		]]></body>
	</method>
	<method name="_addDefaultServer">
        	<body><![CDATA[
		var listitem = document.createElement("menuitem");
		listitem.setAttribute("class", "menuitem-non-iconic");
		listitem.setAttribute("type", "non-iconic-noaccel");
		listitem.setAttribute("label", 
          Components.classes["@mozilla.org/intl/stringbundle;1"]
            .getService(Components.interfaces.nsIStringBundleService)
            .createBundle("chrome://messenger/locale/messenger.properties")
            .GetStringFromName("defaultServerTag"));
		this._smtpPopup.appendChild(listitem);
		this._smtpMenu.selectedItem = listitem;
		]]></body>
	</method>
	<method name="_addServer">
		<parameter name="server" />
        	<body><![CDATA[
		if (server instanceof Components.interfaces.nsISmtpServer && !server.redirectorType) {
			var listitem = document.createElement("menuitem");
			listitem.setAttribute("class", "menuitem-non-iconic");
			listitem.setAttribute("type", "non-iconic-noaccel");
			listitem.setAttribute("label", (server.description?server.description:server.hostname));
			listitem.setAttribute("key", server.key);
			this._smtpPopup.appendChild(listitem);
		}
		]]></body>
	</method>
	<method name="refresh">
        <body><![CDATA[
            this.unload();
            this.load();
        ]]></body>
	</method>
    <method name="load">
        <body><![CDATA[
            this._addDefaultServer();
            this._smtpPopup.appendChild(document.createElement("menuseparator"));
            
			var servers, smtpService = Components.classes["@mozilla.org/messengercompose/smtp;1"]
                .getService(Components.interfaces.nsISmtpService);
			// check for new https://hg.mozilla.org/comm-central/rev/fab9e5145cd4 smtpService
			if (typeof(smtpService.servers) == "object") servers = smtpService.servers;
			else servers = smtpService.smtpServers;
			
			while (servers && servers.hasMoreElements())
				this._addServer(servers.getNext());
        ]]></body>
    </method>
    <method name="unload">
        <body><![CDATA[
            var MenuItems = this._smtpPopup.childNodes
            while (MenuItems.length > 0) { this._smtpPopup.removeChild(MenuItems[0]) }
            this._smtpMenu.selectedItem = null;
        ]]></body>
    </method>
	<constructor>
		<![CDATA[
            this.load();
		]]>
	</constructor>
	<property name="smtp" onget="return this._smtpMenu.selectedItem.getAttribute('key');" >
		<setter><![CDATA[
		if (val == virtualIdentityExtension.NO_SMTP_TAG) return; // dont overwrite if not set
		virtualIdentityExtension.MyLog.debug("v_identity.xml smtp set to '" + val + "'")
		var MenuItems = this._smtpPopup.childNodes
		for (var index = 0; index < MenuItems.length; index++) {
			if (MenuItems[index].localName == "menuseparator") continue;
			if (MenuItems[index].getAttribute("key") == val) {
				this._smtpMenu.selectedItem = MenuItems[index];
				break;
			}
		}
		]]></setter>
	</property>
	<field name="_smtpPopup">document.getAnonymousElementByAttribute(this, "anonid", "virtualIdentityExtension_SmtpServerList_popup")</field>
	<field name="_smtpMenu">document.getAnonymousElementByAttribute(this, "anonid", "smtpServerMenuList")</field>
	<field name="_smtpService"></field>

	</implementation>
	</binding>
	
	
	
	
	<binding id="fromMenuList_clone" display="xul:menu" extends="chrome://messenger/content/mailWidgets.xml#menulist-description">
  	<resources>
      		<stylesheet src="chrome://global/skin/menu.css"/>
		<stylesheet src="chrome://global/skin/autocomplete.css"/>
  	</resources>
  	<content sizetopopup="pref">
		<xul:hbox class="contentHBox" anonid="contentHBox" flex="1"  >
			<xul:hbox id="identityHbox" class="identityHbox" flex="1">
				<xul:vbox><xul:spacer flex="1" />
					<xul:image class="menulist_clone-icon" id="virtualIdentityExtension_msgIdentityClone_image" xbl:inherits="src"/>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:vbox flex="1" id="virtualIdentityExtension_msgIdentityClone_fromVbox"><xul:spacer flex="1" />
<!-- 					textbox is internally an html:input field which inherits the onblur event.
					Thats why we have to search the textbox before calling blurEvent() -->
					<xul:textbox anonid="textBox" type="search" id="virtualIdentityExtension_msgIdentityClonetextBoxElem" class="plain menulist_clone-textbox" allowevents="true" xbl:inherits="value=label,crop,accesskey,nomatch=vid" oncommand="event.stopPropagation(); document.getBindingParent(this).inputEvent();"
					onblur="event.stopPropagation(); var elem = this; while (elem.localName != 'textbox') elem = elem.parentNode; document.getBindingParent(elem).blurEvent();"
					crop="right" highlightnonmatches="true"/>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:vbox id="virtualIdentityExtension_saveSwitch"><xul:spacer flex="1" />
					<xul:checkbox class="vI_plain" allowevents="true" oncommand="event.stopPropagation();virtualIdentityExtension.vIprefs.set('storage_store', this.checked);" >
						<xul:observes element="virtualIdentityExtension_statusMenu_storage_save" attribute="checked" />
					</xul:checkbox>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:vbox><xul:spacer flex="1" />
					<xul:label value="&vident.accPane.prettyName.prefix;" class="menu_clone-vid virtIdLabel" xbl:inherits="vid" crop="right"/>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:observes element="virtualIdentityExtension_statusMenu_storage_save" attribute="checked" />
			</xul:hbox>
			<xul:hbox id="baseIDHbox" class="baseIDHbox" >
				<xul:vbox><xul:spacer flex="1" />
					<xul:hbox>
						<xul:label id="msgIdentity_base_id_label" class="menu_clone-description" xbl:inherits="value,hidden=base_id_key_hidden" crop="right" hidden="true"/>
						<xul:label id="virtualIdentityExtension_msgIdentityClone_label" class="menu_clone-description" xbl:inherits="value=description" crop="right"/>
					</xul:hbox>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:vbox id="virtualIdentityExtension_saveBaseIDSwitch"><xul:spacer flex="1" />
					<xul:checkbox class="vI_plain" allowevents="true" oncommand="event.stopPropagation();virtualIdentityExtension.vIprefs.set('storage_store_base_id', this.checked);" >
						<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveBaseID" attribute="checked" />
						<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveBaseID" attribute="disabled" />
					</xul:checkbox>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveBaseID" attribute="checked" />
				<xul:observes element="virtualIdentityExtension_statusMenu_storage_saveBaseID" attribute="disabled" />
			</xul:hbox>
			<xul:hbox oncommand="event.stopPropagation();document.getBindingParent(this).smtp = this.smtp" xbl:inherits="showSmtp" anonid="smtpServerListHbox" class="smtpServerListHbox" />
		</xul:hbox>
		<children />
	</content>
      	<implementation>
	<constructor>
		<![CDATA[		
		var inputTextbox = document.getAnonymousElementByAttribute(this, "class", "plain menulist_clone-textbox");
		
		// check if 'search' textboxes are not implemented change to 'timed'
		if (!inputTextbox.timeout) inputTextbox.setAttribute("type", "timed");
		inputTextbox.setAttribute("timeout", "300")
		
		// too early to access virtualIdentityExtension_tooltipPopupset, this might break the interface
		// it will be done in v_identity.js init
		// document.getElementById("virtualIdentityExtension_tooltipPopupset").addTooltip(this, false);
		
		virtualIdentityExtension.vIprefs.addObserver("show_smtp", this.observe, this);
		this.observe(this);
		]]>
	</constructor>
	<destructor>
		<![CDATA[
		var tooltipPopupset = document.getElementById("virtualIdentityExtension_tooltipPopupset")
		if (tooltipPopupset) tooltipPopupset.removeTooltip(this.tooltipElem.getAttribute("tooltip"));
		virtualIdentityExtension.vIprefs.removeObserver("show_smtp", this.observe);
        ]]>
	</destructor>

	<!--
	double the Identity-Select Dropdown-Menu to be more flexible with modifying it
	the original Identity Dropdown Menu is hidden and stores the base Identity, on which one
	the Virtual Identity is build upon
	-->
	<method name="command">
		<body><![CDATA[
		virtualIdentityExtension.MyLog.debug("v_identity.xml msgIdentityCloneElem.doCommand()")
		// copy selected Menu-Value from clone to orig.
		virtualIdentityExtension.MyLog.debug("v_identity.xml copy selected Menu-Value from clone to orig. Searching for id=" + this.selectedMenuItem.identityData.id.key)
    if (typeof getCurrentIdentityKey == 'function') {
      // TB version after changeset 17696 35d9101cb3b1 (menuitem.value == email address)
		  var id_attribute = "identitykey"
    } else {
		  // TB version before changeset 17696 35d9101cb3b1 (menuitem.value == id)
		  var id_attribute = "value"
    }

		if ( this.selectedMenuItem.identityData.id.key != null ) {
			var MenuItems = this._msgIdentityPopupElem.childNodes
			for (var index = 0; index < MenuItems.length; index++) {
				if ( MenuItems[index].getAttribute(id_attribute) == this.selectedMenuItem.identityData.id.key ) {
					this._msgIdentityElem.selectedItem = MenuItems[index];
					this._msgIdentityElem.value = MenuItems[index].getAttribute("value");
          this._msgIdentityElem.identitykey = MenuItems[index].getAttribute("identitykey");
          this._msgIdentityPopupElem.doCommand();
					break;
				}
			}
		}
		this.identityData = this.selectedMenuItem.identityData.getDuplicate();
		virtualIdentityExtension.MyLog.debug("v_identity.xml msgIdentityCloneElem.doCommand() this.value=" + this.value);
		// if current SMTP is empty, take the one from current Identity
		if (this.identityData.smtp.hasNoDefinedSMTP()) {
			if (typeof getCurrentIdentityKey == 'function') {
			  // TB version after changeset 17696 35d9101cb3b1 (menuitem.value == email address)
        if (!this.identitykey)
          this.identitykey = this.identityData.id.key
        if (this.identitykey) {
          virtualIdentityExtension.MyLog.debug("v_identity.xml msgIdentityCloneElem.doCommand() " + this.identitykey)
          this.identityData.smtp.key = this._AccountManager.getIdentity(this.identitykey).smtpServerKey;
          document.getAnonymousElementByAttribute(this, "anonid", "smtpServerListHbox").smtp = this.identityData.smtp.keyNice;
        }
			} else {
			  // TB version before changeset 17696 35d9101cb3b1 (menuitem.value == id)
				this.identityData.smtp.key = this._AccountManager.getIdentity(this.value).smtpServerKey;
				document.getAnonymousElementByAttribute(this, "anonid", "smtpServerListHbox").smtp = this.identityData.smtp.keyNice;
			}
		}
    this.checkForVirtualIdentity();
	]]></body>
	</method>	
	<method name="init">
    <body><![CDATA[
    virtualIdentityExtension.MyLog.debug("v_identity.xml msgIdentityCloneElem.init()")
		var MenuItems = this._msgIdentityPopupElem.childNodes
		for (var index = 0; index < MenuItems.length; index++) {
                        // TB version after changeset 17696 35d9101cb3b1 (menuitem.value == email address)
                        var identity = this._AccountManager.getIdentity(MenuItems[index].getAttribute("identitykey"));
                        if (!identity) continue;

			var description;
                        
                        virtualIdentityExtension.MyLog.debug("getServersForIdentity" + identity);
                        
                        var server = this._AccountManager.getServersForIdentity(identity).queryElementAt(0, Components.interfaces.nsIMsgIncomingServer);

                        // if (server.type == "nntp")
				description = server.prettyName
			// else description = identity.description?"- "+identity.description:identity.accountname
			
      var newIdentity = new virtualIdentityExtension.identityData(window, identity.email, identity.fullName, identity.key,
						identity.smtpServerKey, null, description, true)
			newIdentity.extras.readIdentityValues(identity);
				
			var menuItem = this.addIdentityToCloneMenu(newIdentity)

			if (this._msgIdentity_selectedItem == MenuItems[index]) {
				this.selectedItem = menuItem;
				this.identityData = newIdentity.getDuplicate();
        this._msgIdentityElem.identitykey = MenuItems[index].getAttribute("identitykey");
			}
		}
		this._popupMenu_separator = true;
    virtualIdentityExtension.MyLog.debug("v_identity.xml msgIdentityCloneElem.init() done.")
		]]></body>
	</method>
	<method name="clean">
		<body><![CDATA[
		var MenuItems = this._popupElem.childNodes;
		while (MenuItems.length > 0) {
			try {MenuItems[0].clean();} catch (e) { };
			this._popupElem.removeChild(MenuItems[0])
		}
		this.selectedItem = null;
		this.identityData = null;
		
		this._menu_separator = null;
		]]></body>
	</method>	
	<method name="addIdentityToCloneMenu">
		<parameter name="localIdentityData" />
		<body><![CDATA[
		var existingItem = this._isExistingCloneMenuItem(localIdentityData);
		if (!existingItem) {
			var MenuItem = document.createElement("menuitem");
		    	MenuItem.identityData = localIdentityData;
			MenuItem.setAttribute("class", "identity_clone-popup-item");
			MenuItem.setAttribute("type", "vIdentity"); // to prevent overriding with menuitem:not([type])
			if (typeof getCurrentIdentityKey == 'function') {
			  // TB version after changeset 17696 35d9101cb3b1 (menuitem.value == email address)
				MenuItem.identitykey = localIdentityData.id.key; // might be accessed before item is constructed
			} else {
			  // TB version before changeset 17696 35d9101cb3b1 (menuitem.value == id)
				MenuItem.value = localIdentityData.id.key; // might be accessed before item is constructed
			}

			// set vid explicitely
			if (this._popupMenu_separator) MenuItem.setAttribute("vid", "true");
			else	MenuItem.setAttribute("vid", "false");
						
			this._popupElem.appendChild(MenuItem);
			return MenuItem;
		}
		else return existingItem;
		]]></body>
	</method>
	<method name="addIdentitiesToCloneMenu">
		<parameter name="identityCollection" />
		<body><![CDATA[
		for (var index = 0; index < identityCollection.number; index++)
			identityCollection.menuItems[index] =
				this.addIdentityToCloneMenu(identityCollection.identityDataCollection[index])
		]]></body>
	</method>
	<method name="_getMenuItemForIdentity">
		<parameter name="identitykey" />
		<body><![CDATA[
		var MenuItems = this._popupElem.childNodes;
		for (var index = 0; index < MenuItems.length; index++) {
			if (typeof getCurrentIdentityKey == 'function') {
			  // TB version after changeset 17696 35d9101cb3b1 (menuitem.value == email address)
				if (MenuItems[index].identitykey == identitykey)
					return MenuItems[index]
			} else {
			  // TB version before changeset 17696 35d9101cb3b1 (menuitem.value == id)
				if (MenuItems[index].value == identitykey)
					return MenuItems[index]
			}
		}
		return null;
		]]></body>
	</method>
	<property name="_popupMenu_separator" >
		<getter><![CDATA[
			if (this._menu_separator) {
              this._menu_separator.removeAttribute("hidden");
              return this._menu_separator;
            }
            else return null;
		]]></getter>
		<setter><![CDATA[
			if (!val) return;
			// add hidden separator as indicator that now only virtual identities are added
			this._menu_separator = document.createElement("menuseparator");
			this._menu_separator.setAttribute("hidden", "true");
			this._popupElem.appendChild(this._menu_separator)
		]]></setter>	
	</property>
	<property name="selectedMenuItem" >
		<getter><![CDATA[
			return this.selectedItem;
		]]></getter>
		<setter><![CDATA[
			if (typeof(val) == "object") this.selectedItem = val
			else if (val == "default")
				this.selectedItem = this._getMenuItemForIdentity(this._AccountManager.defaultAccount.defaultIdentity.key)
			else this.selectedItem = this._getMenuItemForIdentity(val)
			this.doCommand();
		]]></setter>	
	</property>
	<method name="_isExistingCloneMenuItem">
		<parameter name="localIdentityData" />
		<body><![CDATA[
		var MenuItems = this._popupElem.childNodes
		for (var j = 0; j < MenuItems.length; j++) {
			if (MenuItems[j].localName == "menuseparator") continue;
			if (MenuItems[j].identityData.equals(localIdentityData)) return MenuItems[j];
		}
		return null;
		]]></body>
	</method>
	<field name="_msgIdentityElem">document.getElementById("msgIdentity")</field>
	<field name="_msgIdentityPopupElem">document.getElementById("msgIdentityPopup")</field>
	<property name="_msgIdentity_selectedItem" >
		<getter><![CDATA[
			if (!this._msgIdentityElem.selectedItem) {
				virtualIdentityExtension.MyLog.debug("v_identity.xml: msgIdentityElem.selectedItem not set, using first Menuitem");
				this._msgIdentityElem.selectedItem = this._msgIdentityPopupElem.firstChild
				virtualIdentityExtension.MyLog.debug("v_identity.xml: msgIdentityElem.doCommand()");
				this._msgIdentityElem.doCommand();
			}
			return this._msgIdentityElem.selectedItem;
		]]></getter>
	</property>
    <property name="_AccountManager" >
        <getter><![CDATA[
            return Components.classes["@mozilla.org/messenger/account-manager;1"]
              .getService(Components.interfaces.nsIMsgAccountManager);
        ]]></getter>
    </property>
	<method name="blurEvent">
        	<body><![CDATA[
		virtualIdentityExtension.MyLog.debug("v_identity.xml blurEvent")
		this.inputEvent(); // timeout might prevent inputEvent to fire before blurEvent
		
		this.label = this.identityData.combinedName; // add "<" and ">" to email if required
		this.setAttribute("label", this.label);
		]]></body>
	</method>
	<method name="inputEvent">
        	<body><![CDATA[		
		virtualIdentityExtension.MyLog.debug("v_identity.xml inputEvent")
		
		this.identityData.combinedName = this.label;
		
		var existingIdentity = this.checkForVirtualIdentity();
    if (typeof getCurrentIdentityKey == 'function') {
      // TB version after changeset 17696 35d9101cb3b1 (menuitem.value == email address)
      if (existingIdentity && this.selectedMenuItem.identitykey != existingIdentity) this.selectedMenuItem = existingIdentity;			} else {
      // TB version before changeset 17696 35d9101cb3b1 (menuitem.value == id)
      if (existingIdentity && this.selectedMenuItem.value != existingIdentity) this.selectedMenuItem = existingIdentity;
    }

		]]></body>
	</method>
	<method name="checkForVirtualIdentity">
		<body><![CDATA[
		virtualIdentityExtension.MyLog.debug("v_identity.xml checkForVirtualIdentity: " + this.identityData.id.key + " '" + this.identityData.id.value + "'")
		var existingIdentity = this.identityData.isExistingIdentity(false);
		
		this.vid = (!existingIdentity);
		
		virtualIdentityExtension.signatureSwitch(existingIdentity);
		
		return existingIdentity;
		]]></body>
	</method>
	<property name="smtp" onget="return this.identityData.smtp.key;" > // used to detect changes from SMTP-Menu
		<setter><![CDATA[
		this.identityData.smtp.key = val;
		
		document.getElementById("virtualIdentityExtension_tooltipPopupset").addTooltip(this);

		var existingIdentity = this.checkForVirtualIdentity();
		if (existingIdentity) this.selectedMenuItem = existingIdentity;
		]]></setter>
	</property>
	<property name="identityData">
		<getter><![CDATA[
    virtualIdentityExtension.MyLog.debug("v_identity.xml identityData getter")
    if (this._identityDataStorage) {
      this._identityDataStorage.extras.getValuesFromEnvironment(); // update with current data
    }
    else {
      virtualIdentityExtension.MyLog.debug("v_identity.xml identityData getter - _identityDataStorage not set")
    }
    return this._identityDataStorage;
		]]></getter>
		<setter><![CDATA[
		virtualIdentityExtension.MyLog.debug("v_identity.xml identityData setter")
		if (!val) this._identityDataStorage = null
		else {
			var oldIdentityData = this._identityDataStorage;
			this._identityDataStorage = val;
			if (oldIdentityData) { // indicates that it's not first time after clean
				virtualIdentityExtension.MyLog.debug("v_identity.xml previousID: fullName='" + oldIdentityData.fullName + "' email='" + oldIdentityData.email + "' smtp='" + oldIdentityData.smtp.key + "' id='" + oldIdentityData.id.key + "' existingID='" + oldIdentityData.existingID + "'");
				virtualIdentityExtension.MyLog.debug("v_identity.xml newID: fullName='" + this._identityDataStorage.fullName + "' email='" + this._identityDataStorage.email + "' smtp='" + this._identityDataStorage.smtp.key + "' id='" + this._identityDataStorage.id.key + "' existingID='" + this._identityDataStorage.existingID + "'");
				if (!this._identityDataStorage.existingID && !this._identityDataStorage.combinedName)
					this._identityDataStorage.fullName = oldIdentityData.fullName;
				if (!this._identityDataStorage.existingID && !this._identityDataStorage.email)
					this._identityDataStorage.email = oldIdentityData.email;
				if (!this._identityDataStorage.smtp.key) this._identityDataStorage.smtp.key = oldIdentityData.smtp.key;
				if (!this._identityDataStorage.id.key) {
					this._identityDataStorage.id.key = oldIdentityData.id.key;
					this._identityDataStorage.sideDescription = oldIdentityData.sideDescription;
				}
				this._identityDataStorage.extras.setValuesToEnvironment();
				if (this._identityDataStorage.existingID) this.vid = false;
				else this.checkForVirtualIdentity();
			}
			else	this.vid = false;		// first time after clean it's always a real identity
			
			this.label = this._identityDataStorage.combinedName;
			this.value = this._identityDataStorage.id.key;
			this.description = this._identityDataStorage.sideDescription;
			document.getAnonymousElementByAttribute(this, "anonid", "smtpServerListHbox").smtp = this._identityDataStorage.smtp.keyNice;
			virtualIdentityExtension.MyLog.debug("v_identity.xml resultingID: fullName='" + this._identityDataStorage.fullName + "' email='" + this._identityDataStorage.email + "' smtp='" + this._identityDataStorage.smtp.key + "' id='" + this._identityDataStorage.id.key + "' existingID='" + this._identityDataStorage.existingID + "'");
		}
		virtualIdentityExtension.MyLog.debug("v_identity.xml identityData setter done.")
		]]></setter>
	</property>
	<field name="_popupElem">document.getElementById("virtualIdentityExtension_msgIdentityPopupClone")</field>
	<field name="tooltipElem">document.getAnonymousElementByAttribute(this, "anonid", "contentHBox")</field>
	<field name="textBoxElem">document.getAnonymousElementByAttribute(this, "anonid", "textBox");</field>
    <method name="observe">
      <parameter name="self" />
      <parameter name="aSubject" />
      <parameter name="aTopic" />
      <parameter name="aPrefName" />
      <body><![CDATA[
        self.showSmtp = 
          virtualIdentityExtension.vIprefs.get("show_smtp");
        var MenuItems = self._popupElem.childNodes;
        for (var j = 0; j < MenuItems.length; j++) {
            if (MenuItems[j].localName == "menuseparator") continue;
            MenuItems[j].smtpStyle = "width:" + document.getElementById("virtualIdentityExtension_SmtpServerList").clientWidth + "px;";
        }
        ]]></body>
    </method>
	<property name="email" onset="this.identityData.email = val; this.label = this.identityData.combinedName; this.inputEvent()" />
	<property name="vid" onget="return (this.getAttribute('vid') == 'true');" onset="this.setAttribute('vid',val?'true':'false'); return val;" />
	<property name="label" onget="return this.textBoxElem.value;" onset="this.textBoxElem.value = val; return val;" />
	<property name="value" onget="return this.getAttribute('value');" onset="this.setAttribute('value', val); return val;" />
  	<property name="identitykey" onget="return this.getAttribute('identitykey');" onset="this.setAttribute('identitykey', val); return val;" />
	<property name="extras" onget="return this.identityData.extras;" />
	<property name="description" onget="return this.getAttribute('description');" onset="this.setAttribute('description', val); return val;" />
	<property name="showSmtp" onget="return (this.getAttribute('showSmtp') == 'true');" onset="this.setAttribute('showSmtp',val?'true':'false'); return val;" />
	</implementation>
	</binding>
</bindings>
