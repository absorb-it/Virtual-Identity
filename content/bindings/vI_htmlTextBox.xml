<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - This program is free software; you can redistribute it and/or modify
   - it under the terms of the GNU General Public License as published by
   - the Free Software Foundation; either version 2 of the License, or
   - (at your option) any later version.

   - This program is distributed in the hope that it will be useful,
   - but WITHOUT ANY WARRANTY; without even the implied warranty of
   - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   - GNU General Public License for more details.

   - You should have received a copy of the GNU General Public License
   - along with this program; if not, write to the Free Software
   - Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

   - The Original Code is the Virtual Identity Extension.

   - The Initial Developer of the Original Code is Rene Ejury.
   - code of remoteBrowserBox was copied and adapted from mozapps/update/updates.xml
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.

   - Contributor(s):
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE overlay [
<!ENTITY % vIdentDTD SYSTEM "chrome://v_identity/locale/vI_prefDialog.dtd">
%vIdentDTD;
]>

<bindings id="vI_htmlTextBoxBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
	
	<binding id="virtualIdentityExtension_remoteBrowserBox">
	<content>
		<xul:vbox flex="1" >
			<xul:vbox class="virtualIdentityExtension_remoteBrowserBoxProgressmeter" flex="1" >
				<xul:progressmeter mode="undetermined" />
				<xul:spacer flex="1" />
			</xul:vbox>
			<xul:browser xbl:inherits="src=url" type="content" class="vI_htmlTextBox" hidden="true" flex="1" disablehistory="true" />
			<xul:button xbl:inherits="tooltiptext=url" label="&vI_prefDialog.openHelpInBrowserButton.label;"
					oncommand="virtualIdentityExtension.prefDialog.openURL(this.tooltipText); virtualIdentityExtension.prefDialog.toggleHelp();" />
		</xul:vbox>
	</content>
 	<resources>
      		<stylesheet src="chrome://v_identity/skin/v_identity.css"/>
  	</resources>
	<implementation>
	<destructor><![CDATA[
		// clean up the listener but you may not have one if you never showed
		// the page with a <remotecontent> element
		if (this._remoteProgressListener) this._content.webProgress.removeProgressListener(this._remoteProgressListener);
	]]></destructor>
	<field name="_init">null</field>
	<method name="init">
	<body><![CDATA[
		if (this._init) return;
		
		// just to be safe, turn off js, auth, plugins, and subframes
		var docShell = this._content.docShell;
		docShell.allowJavascript = false;
		docShell.allowAuth = false;
		docShell.allowPlugins = false;
		//allow redirects
		//docShell.allowMetaRedirects = false;
		docShell.allowSubframes = false;
		//allow images
		//docShell.allowImages = false;
		
		this._init = true;
	]]></body>
	</method>
	<field name="_remoteProgressListener">null</field>
	<property name="url">
		<getter><![CDATA[
		return this.getAttribute("url");
		]]></getter>
		<setter><![CDATA[
		this.init();
		if (this._remoteProgressListener) 
			this._content.webProgress.removeProgressListener(this._remoteProgressListener);
		var self = this;

		this._remoteProgressListener = {
			QueryInterface: function(aIID) {
				if (aIID.equals(Components.interfaces.nsIWebProgressListener) ||
					aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
					aIID.equals(Components.interfaces.nsISupports))
					return this;
				throw Components.results.NS_NOINTERFACE;
			},
			onLocationChange: function() {},
			onProgressChange: function() {},
			onStatusChange:   function() {},
			onSecurityChange: function() {},
			onStateChange:    function(aWebProgress, aRequest, aStateFlags, aStatus) {
				if (!aRequest)
					return;

				const nsIWebProgressListener = 
					Components.interfaces.nsIWebProgressListener;
			
				if (aStateFlags & nsIWebProgressListener.STATE_IS_NETWORK) 
				{
					if (aStateFlags & nsIWebProgressListener.STATE_START) self.onStart();
					else if (aStateFlags & nsIWebProgressListener.STATE_STOP) {
						const nsIHttpChannel = Components.interfaces.nsIHttpChannel;
						try {
							var channel = aRequest.QueryInterface(nsIHttpChannel);
							if (channel.requestSucceeded) {
								// if we get here, the load was OK, report success
								self.onLoad();
								return;
							}
						} catch (ex) {
							// the channel.requestSucceeded can throw
							// NS_ERROR_NOT_AVAILABLE if you can't reach the server
							// so we treat that as an error
						}
						// everything else (like a 404) is an error
						self.onError();
					}
				}
			}
		}
		this._content.webProgress.addProgressListener(this._remoteProgressListener,Components.interfaces.nsIWebProgress.NOTIFY_ALL);
		// load the url now that the listener is registered
		this.setAttribute("url", val);
		]]></setter>
	</property>
	<field name="_content">
		document.getAnonymousElementByAttribute(this, "class", "vI_htmlTextBox");
	</field>
	<field name="_progress">
		document.getAnonymousElementByAttribute(this, "class", "virtualIdentityExtension_remoteBrowserBoxProgressmeter");
	</field>
	<property name="localCss" onget="return this.getAttribute('localCss');" onset="this.setAttribute('localCss', val); return val;" />
	<method name="onError">
	<body><![CDATA[
	//	alert("error");
	]]></body>
	</method>
	<method name="onLoad">
        <body><![CDATA[
		this._content.cssSource = this.localCss;
		this._progress.setAttribute("hidden", "true");
		this._content.removeAttribute("hidden");
	]]></body>
	</method>
	<method name="onStart">
	<body><![CDATA[
		this._content.setAttribute("hidden", "true");
		this._progress.removeAttribute("hidden");
	]]></body>
	</method>
	</implementation>
	</binding>


	<binding id="vI_htmlTextBox" extends="chrome://global/content/bindings/browser.xml#browser">
	<implementation>
	<constructor>
		<![CDATA[		
		virtualIdentityExtension.MyLog.debug('******* vI_htmlTextBox.xml constructor');
		]]>
	</constructor>
	<field name="_cssRead">false</field>
	<property name="cssSource" >
		<setter><![CDATA[
		if (!val) return;
		var head = this.contentDocument.getElementsByTagName("HEAD").item(0);
		var range = document.createRange();
		range.selectNode(head);
		var css_text = this._getContents("chrome://v_identity/skin/" + val);
		var documentFragment = range.createContextualFragment("<style type='text/css'>" + css_text + "</style>");
		head.appendChild(documentFragment);
		virtualIdentityExtension.MyLog.debug("cssSource set to " + val + " done");
		this._cssRead = true;
		]]></setter>
	</property>
	<method name="_getContents">
        <parameter name="aURL" />
		<body><![CDATA[		
                var {classes: Cc, interfaces: Ci, utils: Cu} = Components;
                // read the chrome file (copied from http://forums.mozillazine.org/viewtopic.php?p=921150)
		var ioService=Cc["@mozilla.org/network/io-service;1"]
			.getService(Components.interfaces.nsIIOService);
		var scriptableStream=Cc["@mozilla.org/scriptableinputstream;1"]
			.getService(Components.interfaces.nsIScriptableInputStream);
                Cu.import("resource:///modules/imServices.jsm");
		var channel=ioService.newChannel2(aURL, null, null, null,
                                          Services.scriptSecurityManager.getSystemPrincipal(),
                                          null,
                                          Ci.nsILoadInfo.SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL,
                                          Ci.nsIContentPolicy.TYPE_OTHER);
		var input=channel.open();
		scriptableStream.init(input);
		var str=scriptableStream.read(input.available());
		scriptableStream.close();
		input.close();
		return str;
		]]></body>
	</method>
	<property name="outputString" >
		<setter><![CDATA[
		if (!this._cssRead) this.cssSource = this.getAttribute('cssSource');	// read initial Attributes
		this.contentDocument.lastChild.setAttribute("style", this.getAttribute('documentStyle'));
		
		var oldChilds = this.contentDocument.body.childNodes;
		while (oldChilds.length > 0) this.contentDocument.body.removeChild(oldChilds[0])

		var text_list = val.split(/\n/)
		for (var i = 0; i < text_list.length; i++) {
			if (this._isHR(text_list[i])) continue;
			var text_item = this._checkList(text_list[i]);
			this._add(text_item);
			if (!this._currentList && (i + 1) < text_list.length) {
				var new_br = this.contentDocument
					.createElementNS("http://www.w3.org/1999/xhtml", 'html:br');
				this.contentDocument.body.appendChild(new_br);
			}
		}
		]]></setter>
	</property>
	<field name="_currentList">null</field>
	<field name="_currentBaseNode">null</field>
	<method name="_isHR">
        <parameter name="text" />
		<body><![CDATA[		
		if (text == "---") {
			var new_hr = this.contentDocument
				.createElementNS("http://www.w3.org/1999/xhtml", 'html:hr');
			this.contentDocument.body.appendChild(new_hr);
			return true;
		}
		return false;
		]]></body>
	</method>
	<method name="_checkList">
        <parameter name="text" />
		<body><![CDATA[
		if (text.match(/^\*\s/)) {
			if (!this._currentList) {
				this._currentList = this.contentDocument
					.createElementNS("http://www.w3.org/1999/xhtml", 'html:ul');
				this.contentDocument.body.appendChild(this._currentList);
			}
			this._currentBaseNode = this.contentDocument
								.createElementNS("http://www.w3.org/1999/xhtml", 'html:li');
			this._currentList.appendChild(this._currentBaseNode);
		}
		else {
			this._currentList = null;
			this._currentBaseNode = this.contentDocument.body;
		}
		return text.replace(/^\*\s/,"")
		]]></body>
	</method>
	<method name="_add">
        <parameter name="text" />
		<body><![CDATA[
		if (text.match(/http[s]?:\/\/\S+/)) {
			if (RegExp.leftContext) this._addText(RegExp.leftContext)
			if (RegExp.lastMatch) this._addLink(RegExp.lastMatch)
			if (RegExp.rightContext) this._add(RegExp.rightContext)
		}
		else this._addText(text);
		]]></body>
	</method>
	<method name="_addText">
        <parameter name="text" />
		<body><![CDATA[		
		var range = document.createRange();
		range.selectNode(this._currentBaseNode);
		var documentFragment = range.createContextualFragment(text);
		this._currentBaseNode.appendChild(documentFragment);
		]]></body>
	</method>
	<method name="_addLink">
        <parameter name="text" />
		<body><![CDATA[		
		var new_a = this.contentDocument
			.createElementNS("http://www.w3.org/1999/xhtml", 'html:a');
		new_a.setAttribute("href", text)
		new_a.setAttribute("style", "text-decoration: underline")
		this._currentBaseNode.appendChild(new_a);
		var new_text = this.contentDocument.createTextNode(text);
		new_a.appendChild(new_text);
		]]></body>
	</method>
	</implementation>
	</binding>

</bindings>
